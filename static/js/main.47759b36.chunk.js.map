{"version":3,"sources":["assets/images/user1.jpg","assets/images/user2.jpg","assets/images/user3.jpg","assets/images/user4.jpg","components/Contacts.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","contacts","image","require","name","jobTitle","address","Contacts","react_default","a","createElement","Col","xs","Row","map","contact","key","components_Contact","Object","assign","Component","Contact","props","_props$name","_props$image","_props$jobTitle","_props$address","sm","md","className","src","App","Contacts_Contacts","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gJAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0LCIlCC,EAAW,CACf,CACEC,MAAOC,EAAQ,IACfC,KAAM,iBACNC,SAAU,2BACVC,QAAS,qCAEX,CACEJ,MAAOC,EAAQ,IACfC,KAAM,iBACNC,SAAU,2BACVC,QAAS,qCAEX,CACEJ,MAAOC,EAAQ,IACfC,KAAM,iBACNC,SAAU,2BACVC,QAAS,qCAEX,CACEJ,MAAOC,EAAQ,IACfC,KAAM,iBACNC,SAAU,2BACVC,QAAS,sCAGQC,mLAEjB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,IACPJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACGZ,EAASa,IAAI,SAACC,EAASC,GAAV,OACZR,EAAAC,EAAAC,cAACO,EAADC,OAAAC,OAAA,CAASH,IAAKA,GAASD,eANGK,aCWvBC,EAtCC,SAAAC,GAAS,IAAAC,EACwCD,EAAvDlB,YADe,IAAAmB,EACR,GADQA,EAAAC,EACwCF,EAA5CpB,aADI,IAAAsB,EACI,GADJA,EAAAC,EACwCH,EAAhCjB,gBADR,IAAAoB,EACmB,GADnBA,EAAAC,EACwCJ,EAAjBhB,eADvB,IAAAoB,EACiC,GADjCA,EAEvB,OACElB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIe,GAAI,EAAGC,GAAI,GACtBpB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKgB,UAAU,QACbrB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIiB,UAAU,mBACrBrB,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,IACPJ,EAAAC,EAAAC,cAAA,OAAKoB,IAAK5B,KAEZM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIiB,UAAU,QACrBrB,EAAAC,EAAAC,cAAA,SAAIN,IAENI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,IACPJ,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,aAAaxB,IAE5BG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,IACPJ,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,eACbrB,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,0CACbrB,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,wBAAwBvB,OAK7CE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIiB,UAAU,UACrBrB,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIiB,UAAU,mBACrBrB,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,oBACbrB,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,uBACbrB,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,6BClBZE,0LARX,OACEvB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAACsB,EAAD,cAJUZ,cCQEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.47759b36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user1.da2e5468.jpg\";","module.exports = __webpack_public_path__ + \"static/media/user2.9a5ab8d7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/user3.6f5a0c65.jpg\";","module.exports = __webpack_public_path__ + \"static/media/user4.4d87f312.jpg\";","import React, { Component } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Contact } from \"../components\";\n\nconst contacts = [\n  {\n    image: require(\"../assets/images/user1.jpg\"),\n    name: \"Vanessa Norton\",\n    jobTitle: \"User Experience Designer\",\n    address: \"111 8th Avenue New York, NY 10011\"\n  },\n  {\n    image: require(\"../assets/images/user2.jpg\"),\n    name: \"Vanessa Norton\",\n    jobTitle: \"User Experience Designer\",\n    address: \"111 8th Avenue New York, NY 10011\"\n  },\n  {\n    image: require(\"../assets/images/user3.jpg\"),\n    name: \"Vanessa Norton\",\n    jobTitle: \"User Experience Designer\",\n    address: \"111 8th Avenue New York, NY 10011\"\n  },\n  {\n    image: require(\"../assets/images/user4.jpg\"),\n    name: \"Vanessa Norton\",\n    jobTitle: \"User Experience Designer\",\n    address: \"111 8th Avenue New York, NY 10011\"\n  }\n];\nexport default class Contacts extends Component {\n  render() {\n    return (\n      <Col xs={12}>\n        <Row>\n          {contacts.map((contact, key) => (\n            <Contact key={key} {...contact} />\n          ))}\n        </Row>\n      </Col>\n    );\n  }\n}\n","import React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\n\nconst Contact = props => {\n  const { name = \"\", image = \"\", jobTitle = \"\", address = \"\" } = props;\n  return (\n    <Col xs={12} sm={6} md={3}>\n      <Row className=\"card\">\n        <Col xs={12} className=\"top text-center\">\n          <Row>\n            <Col xs={12}>\n              <img src={image} />\n            </Col>\n            <Col xs={12} className=\"name\">\n              <b>{name}</b>\n            </Col>\n            <Col xs={12}>\n              <p className=\"job-title\">{jobTitle}</p>\n            </Col>\n            <Col xs={12}>\n              <div className=\"description\">\n                <i className=\"fas fa-map-marker-alt float-left icon\" />\n                <p className=\"job-title float-left\">{address}</p>\n              </div>\n            </Col>\n          </Row>\n        </Col>\n        <Col xs={12} className=\"bottom\">\n          <Row>\n            <Col xs={12} className=\"bottom-contents\">\n              <i className=\"far fa-envelope\" />\n              <i className=\"far fa-comment-alt\" />\n              <i className=\"far fa-user-circle\" />\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Col>\n  );\n};\n\nexport default Contact;\n","import React, { Component } from \"react\";\nimport { Contacts } from \"./components\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Contacts />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}